@using FlyAwayPlus.Models

@{
    var photo = ViewData["listPhotoDict"] as Dictionary<int, List<Photo>>;
    var place = ViewData["listPlaceDict"] as Dictionary<int, Place>;
    var video = ViewData["listVideoDict"] as Dictionary<int, Video>;
    var user = ViewData["listUserDict"] as Dictionary<int, User>;
    var dislike = ViewData["dislikeCount"] as Dictionary<int, int>;
    var like = ViewData["likeCount"] as Dictionary<int, int>;
    var comment = ViewData["commentCount"] as Dictionary<int, int>;
    var userComment = ViewData["userCommentCount"] as Dictionary<int, int>;
    var isLikeDict = ViewData["isLikeDict"] as Dictionary<int, bool>;
    var isDislikeDict = ViewData["isDislikeDict"] as Dictionary<int, bool>;
    var isWishDict = ViewData["isWishDict"] as Dictionary<int, bool>;
}

@foreach (var post in ViewData["listPost"] as List<Post>)
{
    string btnWishClass = isWishDict[post.PostId] ? "btn-warning" : "btn-primary";
    string btnLikeClass = isLikeDict[post.PostId] ? "btn-warning" : "btn-primary";
    string btnDislikeClass = isDislikeDict[post.PostId] ? "btn-warning" : "btn-primary";

    string btnLikeIconClass = isLikeDict[post.PostId] ? "interacted fa-thumbs-up" : "";
    string btnDislikeIconClass = isDislikeDict[post.PostId] ? "interacted fa-thumbs-down" : "";

    <div class="white-panel">
        <div class="dark-wrapper">
            @foreach (var p in photo[post.PostId])
            {
                <img src="@(p.Url.StartsWith("http") ? "" : "/Images/UserUpload/")@p.Url" alt="@p.Url">
            }

            @if (@video[post.PostId] != null)
            {
                <div class="video-overlay">
                    <a class="fancybox fancybox.iframe" href="http://www.youtube.com/embed/@video[post.PostId].Path?enablejsapi=1&wmode=opaque">
                        <img src="http://img.youtube.com/vi/@video[post.PostId].Path/0.jpg" alt="@video[post.PostId]">
                        <span class="video-thumbnail-button"></span>
                    </a>
                </div>
            }
            <ul class="post-actions" style="padding-left: 0px;">
                <!--
                <li>
                    <a href="javascript:;" role="@post.PostId" class="btn @btnWishClass btn-circle btn-lg btn-plus" style="margin-right: 20px;"><i class="glyphicon glyphicon-plus"></i></a>
                </li>
                -->
                <li style="width:50%">
                    <a href="javascript:;" role="@post.PostId" class="btn @btnLikeClass btn-circle btn-lg btn-like" style="margin-right: 20px; margin-left: 30%;"><i class="glyphicon glyphicon-thumbs-up"></i></a>
                </li>
                <li style="width:50%">
                    <a href="javascript:;" role="@post.PostId" class="btn @btnDislikeClass btn-circle btn-lg btn-dislike" style="margin-right: 20px; margin-left: 30%;"><i class="glyphicon glyphicon-thumbs-down"></i></a>
                </li>
            </ul>
        </div>
        <div class="panel-content-wrapper">
            <h1>
                <a href="/Post/Index/@post.PostId">
                    <i class="fa fa-map-marker"></i>&nbsp; @place[post.PostId].Name
                </a>
            </h1>
            @if (!string.IsNullOrEmpty(post.Content))
            {
                <div class="divider"></div>
                <p class="board-post-content">@post.Content</p>
            }

            <div class="user-interacted-area">
                <i class="fa fa-thumbs-o-up @btnLikeIconClass"></i>&nbsp;<b class="like-count">@like[post.PostId]</b>&nbsp;
                <i class="fa fa-thumbs-o-down @btnDislikeIconClass"></i>&nbsp;<b class="dislike-count">@dislike[post.PostId]</b>&nbsp;
                <i class="fa fa-comment-o"></i>&nbsp;@comment[post.PostId]&nbsp;
                <i class="fa fa-group"></i>&nbsp;@userComment[post.PostId]
            </div>
            <div class="divider"></div>
            <div class="user-info">
                <img src="@user[post.PostId].Avatar" alt="@String.Format("{0} {1}", user[post.PostId].FirstName, user[post.PostId].LastName)" class="avatar" />
                <div style="width: 100%">
                    <a href="/User/Index/@user[post.PostId].UserId" class="name-user hover-card-user">@String.Format("{0} {1}", user[post.PostId].FirstName, user[post.PostId].LastName)</a>
                    <div class="post-time">@post.ToRealtime()</div>
                </div>

                @if (((User)Session["user"]).UserId == @user[post.PostId].UserId)
                {
                    <div class="dropdown">
                        <span class="glyphicon glyphicon-option-vertical post-list-post-option" data-toggle="dropdown" aria-hidden="true"></span>
                        <ul class="dropdown-menu bullet pull-center post-list-post-option-actions" role="menu" style="margin-top: -20px">
                            <li role="presentation">
                                <a role="menuitem" tabindex="-1" class="post-post-list-post-option-edit" value="@post.PostId" href="javascript:;" data-toggle="modal" data-target="#edit-post-modal">Edit</a>
                            </li>
                            <li role="presentation">
                                <a role="menuitem" tabindex="-1" class="post-post-list-post-option-delete" value="@post.PostId" href="javascript:;">Delete</a>
                            </li>
                        </ul>
                    </div>
                }
            </div>
        </div>
    </div>
}

<script>
    var isLoadMore = '@ViewData["isLoadMore"].ToString()';
    var typePost = '@ViewData["typePost"].ToString()';

    $(function () {
        commonModule.setBlocksit($(".blog-landing"), 212);

        // Delete post warning.
        $(".post-post-list-post-option-delete").click(function () {
            swal({
                title: "Are you sure?",
                text: "You will not be able to recover this post!",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes, delete it!",
                closeOnConfirm: false
            }, function () {
                $(this).parentsUntil(".white-panel").parent().remove();
                commonModule.setBlocksit($(".blog-landing"), 212);

                $.ajax({
                    type: "POST",
                    url: "/Post/DeletePost",
                    data: { postId: $(this).attr("value") },
                    error: function () {
                        swal("Oops...", "Something went wrong! Try again later!", "error");
                    }
                });

                swal("Deleted!", "Your post has been deleted.", "success");
            });
        });

        fadeImage();
        likePost();
        dislikePost();
        //plusPost();
    });

    // Fires whenever a player has finished loading
    function onPlayerReady(event) {
        event.target.playVideo();
    }

    // Fires when the player's state changes.
    function onPlayerStateChange(event) {
        // Go to the next video after the current one is finished playing
        if (event.data === 0) {
            $.fancybox.next();
        }
    }

    function fadeImage() {
        $(".dark-wrapper").hover(function () {
            $(this).find("img").stop().fadeTo(500, 0.5);

            var postActions = $(this).find(".post-actions");

            postActions.css("visibility", "visible");
            postActions.css("opacity", "1");
        }, function () {
            $(this).find("img").stop().fadeTo(500, 1);

            var postActions = $(this).find(".post-actions");

            postActions.css("visibility", "hidden");
            postActions.css("opacity", "0");
        });
    }

    function likePost() {
        $(".btn-like").click(function (evt) {
            $(this).toggleClass("btn-primary").toggleClass("btn-warning");
            var likeIcon = $(this).parentsUntil(".white-panel")
                                  .parent()
                                  .find(".fa-thumbs-o-up");

            likeIcon.toggleClass("interacted")
                    .toggleClass("fa-thumbs-up");

            var likeCountElement = $(this).parentsUntil(".white-panel").parent()
                .find(".like-count");

            if (likeIcon.hasClass("interacted")) {
                likeCountElement.text(parseInt(likeCountElement.text()) + 1);
            } else {
                likeCountElement.text(parseInt(likeCountElement.text()) - 1);
            }

            unDislikePost(this);
            likeAjax(this);
            evt.preventDefault();
        });
    }

    function unLikePost(post) {
        var likeIcon = $(post).parentsUntil(".white-panel")
                                .parent()
                                .find(".fa-thumbs-o-up");

        var likeCountElement = $(post).parentsUntil(".white-panel").parent()
            .find(".like-count");
        if (likeIcon.hasClass("interacted")) {
            likeIcon.toggleClass("interacted")
                    .toggleClass("fa-thumbs-up");
            likeCountElement.text(parseInt(likeCountElement.text()) - 1);

            var buttonLike = $(post).parentsUntil(".white-panel")
                                .parent()
                                .find(".btn-like");
            $(buttonLike).toggleClass("btn-primary").toggleClass("btn-warning");
        }
    };
    function unDislikePost(post) {
        var dislikeIcon = $(post).parentsUntil(".white-panel")
            .parent()
            .find(".fa-thumbs-o-down");

        var dislikeCountElement = $(post).parentsUntil(".white-panel").parent()
            .find(".dislike-count");

        if (dislikeIcon.hasClass("interacted")) {
            dislikeIcon.toggleClass("interacted")
                .toggleClass("fa-thumbs-down");
            dislikeCountElement.text(parseInt(dislikeCountElement.text()) - 1);
            

            var buttonDislike = $(post).parentsUntil(".white-panel")
                .parent()
                .find(".btn-dislike");
            $(buttonDislike).toggleClass("btn-primary").toggleClass("btn-warning");
        }
    };
    function dislikePost() {
        $(".btn-dislike").click(function (evt) {
            $(this).toggleClass("btn-primary").toggleClass("btn-warning");
            var dislikeIcon = $(this).parentsUntil(".white-panel")
                                  .parent()
                                  .find(".fa-thumbs-o-down");

            dislikeIcon.toggleClass("interacted")
                    .toggleClass("fa-thumbs-down");

            var dislikeCountElement = $(this).parentsUntil(".white-panel").parent()
                .find(".dislike-count");

            if (dislikeIcon.hasClass("interacted")) {
                dislikeCountElement.text(parseInt(dislikeCountElement.text()) + 1);
            } else {
                dislikeCountElement.text(parseInt(dislikeCountElement.text()) - 1);
            }

            unLikePost(this);
            dislikeAjax(this);
            evt.preventDefault();
        });
    };

    function likeAjax(post) {
        var controller = "/User/Like";
        var postID = parseInt($(post).attr("role"));
        var data = {
            postId: postID
        }

        commonModule.callAjax(controller, data, null);
    };
    function dislikeAjax(post) {
        var controller = "/User/Dislike";
        var postID = parseInt($(post).attr("role"));
        var data = {
            postId: postID
        }

        commonModule.callAjax(controller, data, null);
    };

    // The API will call this function when the page has finished downloading the JavaScript for the player API
    function onYouTubePlayerAPIReady() {

        // Initialise the fancyBox after the DOM is loaded
        $(document).ready(function () {
            $(".fancybox").attr('rel', 'gallery').fancybox({
                openEffect: 'fade',
                closeEffect: 'elastic',
                nextEffect: 'none',
                prevEffect: 'none',
                padding: 0,
                margin: 70,
                beforeShow: function () {
                    // Find the iframe ID
                    var id = $.fancybox.inner.find('iframe').attr('id');

                    // Create video player object and add event listeners
                    var player = new YT.Player(id, {
                        events: {
                            'onReady': onPlayerReady,
                            'onStateChange': onPlayerStateChange
                        }
                    });
                }
            });
        });
    }
</script>
